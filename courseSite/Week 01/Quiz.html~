<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-08-07 Wed 18:15 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Quiz (Week 1)</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Liam O'Connor" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel='stylesheet' type='text/css' href='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/bundle.css'/><link rel='alternate' type='application/rss+xml'
                                       href='https://www.cse.unsw.edu.au/~cs3141/19t2/index.xml' title='RSS for announcements'><script src='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/bundle.js' type='text/javascript' ></script><script src='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/collapses.js' type='text/javascript' ></script>
                                       <meta http-equiv='Content-Type' content='text/html;charset=UTF-8' />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2017 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
        displayAlign: "center",
        displayIndent: "0em",

        "HTML-CSS": { scale: 100,
                        linebreaks: { automatic: "false" },
                        webFont: "TeX"
                       },
        SVG: {scale: 100,
              linebreaks: { automatic: "false" },
              font: "TeX"},
        NativeMML: {scale: 100},
        TeX: { equationNumbers: {autoNumber: "AMS"},
               MultLineWidth: "85%",
               TagSide: "right",
               TagIndent: ".8em"
             }
});
</script>
<script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML"></script>
</head>
<body>
<div id="preamble" class="status">
<img src="http://www.cse.unsw.edu.au/~cs3141/19t2/statics/title.png" alt="COMP3141 Software System Design and Implementation"
     style="position:absolute; left:0px; top:0px; z-index:-1;max-width:800px;width:100%;"/>
<p style="text-align:center; font-weight:bold; display:block;">Software System Design and Implementation</p>
<small style="text-align:center; display:block;">Term 2, 2019</small>
<hr/>
<ul class="org-ul collapsibleList">
<li><a href="../index.html">Announcements</a></li>
<li><a href="../outline.html">Course Outline</a></li>
<li><a href="../Lectures.html">Course Schedule</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs3141/cgi-bin/gal/19t2/gallery">Gallery</a></li>
<li><a href="https://moodle.telt.unsw.edu.au/course/view.php?id=40872">Moodle - Recordings</a></li>
<li><a href="https://piazza.com/class/jw3no041p794do">Piazza Forum</a></li>
<li><a href="../HaskellSetup.html">Setting up Haskell</a></li>
<li>Assignment 1
<ul class="org-ul collapsibleList">
<li><a href="../Assignment 1/code.html">Code </a></li>
<li><a href="../Assignment 1/Spec.pdf">Spec</a></li>
</ul></li>
<li>Assignment 2
<ul class="org-ul collapsibleList">
<li><a href="../Assignment 2/code.html">Code </a></li>
<li><a href="../Assignment 2/Spec.pdf">Spec</a></li>
</ul></li>
<li>Exam
<ul class="org-ul collapsibleList">
<li><a href="../Exam/Sample Exam.pdf">Sample Exam</a></li>
<li><a href="../Exam/Sample Solutions.pdf">Sample Solutions</a></li>
</ul></li>
<li>Week 1
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/Quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/1Tue/Code.html">Code </a></li>
<li><a href="../Week 01/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 01/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/2Wed/Code.html">Code </a></li>
<li><a href="../Week 01/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 01/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 2
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/exercise.html">Exercise </a></li>
<li><a href="../Week 02/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/1Tue/Board.pdf">Board</a></li>
<li><a href="../Week 02/1Tue/Code.html">Code </a></li>
<li><a href="../Week 02/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 02/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/2Wed/Board.pdf">Board</a></li>
<li><a href="../Week 02/2Wed/Code.html">Code </a></li>
<li><a href="../Week 02/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 02/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 3
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/exercise.html">Exercise </a></li>
<li><a href="../Week 03/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/1Tue/Code.html">Code </a></li>
<li><a href="../Week 03/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 03/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/2Wed/Code.html">Code </a></li>
<li><a href="../Week 03/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 03/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 4
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/exercise.html">Exercise </a></li>
<li><a href="../Week 04/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/1Tue/code.html">Code </a></li>
<li><a href="../Week 04/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 04/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/2Wed/Code.html">Code </a></li>
<li><a href="../Week 04/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 04/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 6
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/exercise.html">Exercise </a></li>
<li><a href="../Week 06/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/1Tue/Code.html">Code </a></li>
<li><a href="../Week 06/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 06/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/2Wed/Code.html">Code </a></li>
<li><a href="../Week 06/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 06/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 7
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/notes.html">Additional Reading </a></li>
<li><a href="../Week 07/exercise.html">Exercise </a></li>
<li><a href="../Week 07/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/1Tue/Code.html">Code </a></li>
<li><a href="../Week 07/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 07/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/2Wed/code.html">Code </a></li>
<li><a href="../Week 07/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 07/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 8
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/exercise.html">Exercise </a></li>
<li><a href="../Week 08/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/1Tue/Code.html">Code </a></li>
<li><a href="../Week 08/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 08/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/2Wed/Code.html">Code </a></li>
<li><a href="../Week 08/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 08/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 9
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/1Tue/Board.pdf">Board</a></li>
<li><a href="../Week 09/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 09/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/2Wed/Code.html">Code </a></li>
<li><a href="../Week 09/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 09/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 10
<ul class="org-ul collapsibleList">
<li><a href="../Week 10/Guest Slides.pdf">Guest Slides</a></li>
</ul></li>
</ul>
<script type='text/javascript'>CollapsibleLists.apply();</script>
</div>
<div id="content">
<h1 class="title">Quiz (Week 1)</h1>

<div id="outline-container-org6c7f426" class="outline-2">
<h2 id="org6c7f426"><span class="section-number-2">1</span> Typing</h2>
<div class="outline-text-2" id="text-1">
<p>
Assuming for the sake of simplicity 
that all numeric literals are of type <code>Int</code>,
What is the type of the following Haskell expressions?
</p>
</div>

<div id="outline-container-org15ec23d" class="outline-3">
<h3 id="org15ec23d"><span class="section-number-3">1.1</span> Question 1</h3>
<div class="outline-text-3" id="text-1-1">
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-string">"hello world"</span>
</pre>
</div>
<div class="MULTI">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">string</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">[<span class="org-type">Char</span>]</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">char<span class="org-function-name">*</span></code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">[<span class="org-type">String</span>]</code></li>
</ol>

</div>
<div class="NOTES">
<p>
In Haskell, strings are actually just lists of characters, and
the names of types (like <code>Char</code>) are always written with an initial
upper-case letter.
</p>

</div>

</div>
</div>
<div id="outline-container-orgf45878e" class="outline-3">
<h3 id="orgf45878e"><span class="section-number-3">1.2</span> Question 2</h3>
<div class="outline-text-3" id="text-1-2">
<div class="org-src-container">
<pre class="src src-haskell">(1, <span class="org-string">'x'</span>, [<span class="org-type">True</span>])
</pre>
</div>
<div class="MULTI">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-type">List</span></code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">(<span class="org-type">Int</span>, <span class="org-type">Char</span>, <span class="org-type">Bool</span>)</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-type">Tuple</span></code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">(<span class="org-type">Int</span>, <span class="org-type">Char</span>, [<span class="org-type">Bool</span>])</code></li>
</ol>

</div>
<div class="NOTES">
<p>
In Haskell, a tuple <code class="src src-haskell">(x,y)</code> is typed 
according to the following rule:
</p>

\begin{equation*}
\dfrac{x : \tau_1 \quad y : \tau_2}{(x,y) : (\tau_1, \tau_2)}
\end{equation*}

<p>
This can be read as <code>(x,y)</code> is of type \((\tau_1, \tau_2)\) if <code>x</code> is
of type \(\tau_1\) and <code>y</code> is of type \(\tau_2\).
</p>

<p>
A similar rule exists for triples like 
<code class="src src-haskell">(1,<span class="org-string">'x'</span>,[<span class="org-type">True</span>])</code>, and as <code>1</code> is of type <code>Int</code>,
<code>'x'</code> is of type <code>Char</code>, and <code>[True]</code> is of type <code>[Bool]</code>, we have
answer 4 as the only correct answer.
</p>

</div>

</div>
</div>
<div id="outline-container-org75621ba" class="outline-3">
<h3 id="org75621ba"><span class="section-number-3">1.3</span> Question 3</h3>
<div class="outline-text-3" id="text-1-3">
<div class="org-src-container">
<pre class="src src-haskell">[<span class="org-string">"x"</span><span class="org-type">:[]</span>]
</pre>
</div>
<div class="MULTI">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">[[<span class="org-type">Char</span>]]</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">[[[<span class="org-type">Char</span>]]]</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">[<span class="org-type">Char</span>]</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-type">String</span></code></li>
</ol>

</div>
<div class="NOTES">
<p>
Keeping in mind that <code>String</code> is a synonym for <code>[Char]</code>, we have
the type of cons (the <code>(:)</code> operator) as:
</p>
<div class="org-src-container">
<pre class="src src-haskell">(<span class="org-function-name">:</span>) <span class="org-variable-name">::</span> a <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> [a]
</pre>
</div>
<p>
If we apply the first argument, <code class="src src-haskell"><span class="org-string">"x"</span></code>:
</p>
<div class="org-src-container">
<pre class="src src-haskell">(<span class="org-string">"x"</span><span class="org-type">:</span>) <span class="org-variable-name">::</span> [[<span class="org-type">Char</span>]] <span class="org-variable-name">-&gt;</span> [[<span class="org-type">Char</span>]]
</pre>
</div>
<p>
Then apply the second argument, <code class="src src-haskell"><span class="org-type">[]</span></code>, and we have:
</p>
<div class="org-src-container">
<pre class="src src-haskell">(<span class="org-string">"x"</span><span class="org-type">:[]</span>) <span class="org-variable-name">::</span> [[<span class="org-type">Char</span>]] 
</pre>
</div>
<p>
Lastly, this list of list of characters is in turn put in a list, as it 
is surrounded by square brackets. So the answer is number 2, or a list of 
lists of lists of characters.
</p>

</div>

</div>
</div>

<div id="outline-container-org14aa906" class="outline-3">
<h3 id="org14aa906"><span class="section-number-3">1.4</span> Question 4</h3>
<div class="outline-text-3" id="text-1-4">
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">map</span> (<span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> x <span class="org-variable-name">+</span> 1)
</pre>
</div>
<div class="MULTI">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">[a] <span class="org-variable-name">-&gt;</span> [b]</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-type">Int</span> <span class="org-variable-name">-&gt;</span> <span class="org-type">Int</span></code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">[<span class="org-type">Int</span>] <span class="org-variable-name">-&gt;</span> [<span class="org-type">Int</span>]</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">(<span class="org-type">Int</span> <span class="org-variable-name">-&gt;</span> <span class="org-type">Int</span>) <span class="org-variable-name">-&gt;</span> [<span class="org-type">Int</span>] <span class="org-variable-name">-&gt;</span> [<span class="org-type">Int</span>]</code></li>
<li><span class='mark mark_incorrect'>✗</span>Invalid, as not enough arguments are given to <code>map</code>.</li>
</ol>

</div>
<div class="NOTES">
<p>
It's worth noting that <i>all functions in Haskell accept one argument and
return one result</i>. Multi-argument functions are emulated by writing a
function that, given its first argument, returns a <i>function</i> that awaits
further arguments. This technique is called <i>currying</i>.
</p>

<p>
For example, the function <code>map</code> has the following type:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">map</span> <span class="org-variable-name">::</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> [b]
</pre>
</div>

<p>
This can be more explicitly expressed with the right-associated parentheses,
as follows:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">map</span> <span class="org-variable-name">::</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> ([a] <span class="org-variable-name">-&gt;</span> [b])
</pre>
</div>

<p>
Given the argument function <code class="src src-haskell">(<span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> x <span class="org-variable-name">+</span> 1)</code>, a
lambda expression of type <code class="src src-haskell"><span class="org-type">Int</span> <span class="org-variable-name">-&gt;</span> <span class="org-type">Int</span></code>, <code>map</code>
shall return a function of type <code class="src src-haskell">[<span class="org-type">Int</span>] <span class="org-variable-name">-&gt;</span> [<span class="org-type">Int</span>]</code>,
or option 3.
</p>

</div>

</div>
</div>
</div>

<div id="outline-container-org4298f20" class="outline-2">
<h2 id="org4298f20"><span class="section-number-2">2</span> Evaluation</h2>
<div class="outline-text-2" id="text-2">
<p>
Choose all expressions that are equivalent to the following expressions<sup><a id="fnr.1" class="footref" href="#fn.1">1</a></sup>:
</p>
</div>

<div id="outline-container-org3630fa4" class="outline-3">
<h3 id="org3630fa4"><span class="section-number-3">2.1</span> Question 5</h3>
<div class="outline-text-3" id="text-2-1">
<div class="org-src-container">
<pre class="src src-haskell">3 <span class="org-type">:</span> [40] <span class="org-variable-name">++</span> [50] <span class="org-variable-name">++</span> 5 <span class="org-type">:</span> [60]
</pre>
</div>
<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">3 <span class="org-type">:</span> [40] <span class="org-variable-name">++</span> ([50] <span class="org-variable-name">++</span> 5 <span class="org-type">:</span> [60])</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">3 <span class="org-type">:</span> ([40] <span class="org-variable-name">++</span> [50] <span class="org-variable-name">++</span> 5) <span class="org-type">:</span> [60]</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">(3 <span class="org-type">:</span> [40] <span class="org-variable-name">++</span> [50]) <span class="org-variable-name">++</span> (5 <span class="org-type">:</span> [60])</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">3 <span class="org-type">:</span> ([40] <span class="org-variable-name">++</span> [50] <span class="org-variable-name">++</span> (5 <span class="org-type">:</span> [60]))</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">3 <span class="org-type">:</span> [40, 50] <span class="org-variable-name">++</span> [5, 60]</code></li>
</ol>

</div>
<div class="NOTES">
<p>
It's important to note that the <code>(++)</code> operator is associative, that is:
</p>
<div class="org-src-container">
<pre class="src src-haskell">(xs <span class="org-variable-name">++</span> ys) <span class="org-variable-name">++</span> zs <span class="org-variable-name">==</span> xs <span class="org-variable-name">++</span> (ys <span class="org-variable-name">++</span> zs)
</pre>
</div>
<p>
This can be proven by induction on <code>xs</code>, with the aid of some helper lemmas.
Because of this associativity, the placement of parentheses around <code>++</code>-terms
is not important, which makes options 1,3 and 4 correct. In addition, option
5 is also correct as we know that <code class="src src-haskell">[40] <span class="org-variable-name">++</span> [50] <span class="org-variable-name">=</span> [40,50]</code>
and that <code class="src src-haskell">5 <span class="org-type">:</span> [60] <span class="org-variable-name">=</span> [5,60]</code>.  
</p>

</div>

</div>
</div>

<div id="outline-container-orgb9ce5a0" class="outline-3">
<h3 id="orgb9ce5a0"><span class="section-number-3">2.2</span> Question 6</h3>
<div class="outline-text-3" id="text-2-2">
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">map</span> (<span class="org-variable-name">$</span> 5) [(<span class="org-variable-name">-</span>),(<span class="org-variable-name">+</span>),(<span class="org-variable-name">*</span>)]
</pre>
</div>
<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-function-name">map</span> (<span class="org-variable-name">\</span>f x <span class="org-variable-name">-&gt;</span> f x 5) [(<span class="org-variable-name">-</span>),(<span class="org-variable-name">+</span>),(<span class="org-variable-name">*</span>)]</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell"><span class="org-function-name">map</span> (<span class="org-variable-name">\</span>f x <span class="org-variable-name">-&gt;</span> f 5 x) [(<span class="org-variable-name">-</span>),(<span class="org-variable-name">+</span>),(<span class="org-variable-name">*</span>)]</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell">[(<span class="org-variable-name">-</span> 5),(<span class="org-variable-name">+</span> 5),(<span class="org-variable-name">*</span> 5)]</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">[(5 <span class="org-variable-name">-</span>),(5 <span class="org-variable-name">+</span>),(5 <span class="org-variable-name">*</span>)]</code></li>
<li><span class='mark mark_incorrect'>✗</span>The expression is invalid.</li>
</ol>

</div>
<div class="NOTES">
<p>
The <code>($)</code> operator is defined as follows:
</p>
<div class="org-src-container">
<pre class="src src-haskell">(<span class="org-function-name">$</span>) <span class="org-type">:</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> a <span class="org-variable-name">-&gt;</span> b
f <span class="org-function-name">$</span> x <span class="org-variable-name">=</span> f x
</pre>
</div>
<p>
That is, it applies everything on the right as an argument to the function
given on the left. It is typically used to eliminate parentheses in Haskell
code, but can also be used in a section like this, where <code class="src src-haskell">(<span class="org-variable-name">$</span> 5)</code>
is equivalent to <code class="src src-haskell"><span class="org-variable-name">\</span>f <span class="org-variable-name">-&gt;</span> f 5</code> which is equivalent
to <code class="src src-haskell"><span class="org-variable-name">\</span>f x <span class="org-variable-name">-&gt;</span> f 5 x</code> by &eta;-expansion. Thus option 2
is correct. Taking option 2 and evaluating it further, we will get the list:
</p>
<div class="org-src-container">
<pre class="src src-haskell">[<span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> (<span class="org-variable-name">-</span>) 5 x, <span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> (<span class="org-variable-name">+</span>) 5 x, <span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> (<span class="org-variable-name">*</span>) 5 x]
</pre>
</div>
<p>
Which is equivalent to the operator sections used in answer 4.
Answers 1 and 3 are incorrect as they flip the order of arguments used 
for the function. Answer 3 is even more incorrect as <code>(- 5)</code> will be
interpreted as a negative number, not an operator section, and thus produce
a type error.
</p>

</div>

</div>
</div>

<div id="outline-container-orgc5f21f7" class="outline-3">
<h3 id="orgc5f21f7"><span class="section-number-3">2.3</span> Question 7</h3>
<div class="outline-text-3" id="text-2-3">
<p>
<i>Note</i>: The functions <code>ord</code> and <code>chr</code>
are from <code>Data.Char</code>.
They convert <code>Char</code> values to/from 
their ASCII (or unicode) numbers, respectively.
For these questions, the answers may have a more general
type than the original expression. So long as a given answer
has
equivalent behaviour <i>for the type of the original expression</i>, we
consider the answer to be equivalent.
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">let</span> increment x <span class="org-variable-name">=</span> 1 <span class="org-variable-name">+</span> x
<span class="org-keyword">in</span> <span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> map chr (map increment (map ord xs))
</pre>
</div>
<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell"><span class="org-function-name">map</span> chr <span class="org-variable-name">.</span> map (1<span class="org-variable-name">+</span>) <span class="org-variable-name">.</span> map ord</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell"><span class="org-function-name">map</span> (chr <span class="org-variable-name">.</span> (1<span class="org-variable-name">+</span>) <span class="org-variable-name">.</span> ord)</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell"><span class="org-function-name">map</span> succ</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-function-name">map</span> chr <span class="org-variable-name">$</span> map (1<span class="org-variable-name">+</span>) <span class="org-variable-name">$</span> map ord</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell"><span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> map chr <span class="org-variable-name">.</span> map (1<span class="org-variable-name">+</span>) <span class="org-variable-name">$</span> map ord xs</code></li>
</ol>

</div>
<div class="NOTES">
<p>
The following bit of equational reasoning hits every answer in this question,
except 4, which is not type correct.
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">let</span> increment x <span class="org-variable-name">=</span> 1 <span class="org-variable-name">+</span> x
<span class="org-keyword">in</span> <span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> map chr (map increment (map ord xs))
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Shift argument into lambda</span>
<span class="org-keyword">let</span> increment <span class="org-variable-name">=</span> <span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> 1 <span class="org-variable-name">+</span> x
<span class="org-keyword">in</span> <span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> map chr (map increment (map ord xs))
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Simplify lambda to operator section</span>
<span class="org-keyword">let</span> increment <span class="org-variable-name">=</span> (1 <span class="org-variable-name">+</span>)
<span class="org-keyword">in</span> <span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> map chr (map increment (map ord xs))
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Reduce let expression by substitution </span>
<span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> map chr (map (1 <span class="org-variable-name">+</span>) (map ord xs))
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Introduce composition, f (g x) = (f . g) x</span>
<span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> (map chr <span class="org-variable-name">.</span> map (1 <span class="org-variable-name">+</span>)) (map ord xs))
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Remove parentheses with ($)</span>
<span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> map chr <span class="org-variable-name">.</span> map (1 <span class="org-variable-name">+</span>) <span class="org-variable-name">$</span> map ord xs <span class="org-comment-delimiter">-- </span><span class="org-comment">Answer 5</span>
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Introduce further composition: f $ g x = (f . g) x</span>
<span class="org-variable-name">\</span>xs <span class="org-variable-name">-&gt;</span> (map chr <span class="org-variable-name">.</span> map (1 <span class="org-variable-name">+</span>) <span class="org-variable-name">.</span> map ord) xs
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">&#951;-reduction</span>
<span class="org-function-name">map</span> chr <span class="org-variable-name">.</span> map (1 <span class="org-variable-name">+</span>) <span class="org-variable-name">.</span> map ord <span class="org-comment-delimiter">-- </span><span class="org-comment">Answer 1</span>
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Map (functor) law, map f . map g = map (f . g)</span>
<span class="org-function-name">map</span> (chr <span class="org-variable-name">.</span> (1 <span class="org-variable-name">+</span>) <span class="org-variable-name">.</span> ord) <span class="org-comment-delimiter">-- </span><span class="org-comment">Answer 2</span>
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">succ is defined for Char values as chr . (1 +) . ord</span>
<span class="org-function-name">map</span> succ <span class="org-comment-delimiter">-- </span><span class="org-comment">Answer 3</span>
</pre>
</div>

</div>

</div>
</div>
<div id="outline-container-org99d5136" class="outline-3">
<h3 id="org99d5136"><span class="section-number-3">2.4</span> Question 8</h3>
<div class="outline-text-3" id="text-2-4">
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">foldr</span> (<span class="org-variable-name">&amp;&amp;</span>) <span class="org-type">True</span> <span class="org-variable-name">.</span> map (<span class="org-variable-name">&gt;=</span> 0)
</pre>
</div>
<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell">and <span class="org-function-name">.</span> map (<span class="org-variable-name">&gt;=</span> 0)</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell"><span class="org-function-name">all</span> (<span class="org-variable-name">&gt;=</span> 0)</code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-function-name">any</span> (<span class="org-variable-name">&gt;=</span> 0)</code></li>
<li><span class='mark mark_correct'>✔</span><code class="src src-haskell"><span class="org-function-name">foldr</span> (<span class="org-variable-name">\</span>a b <span class="org-variable-name">-&gt;</span> a <span class="org-variable-name">&gt;=</span> 0 <span class="org-variable-name">&amp;&amp;</span> b) <span class="org-type">True</span></code></li>
<li><span class='mark mark_incorrect'>✗</span><code class="src src-haskell"><span class="org-function-name">foldl</span> (<span class="org-variable-name">\</span>a b <span class="org-variable-name">-&gt;</span> a <span class="org-variable-name">&amp;&amp;</span> b <span class="org-variable-name">&gt;</span> 0) <span class="org-type">True</span></code></li>
</ol>

</div>
<div class="NOTES">
<p>
The following derivation shows the equivalence to answers 1 and 2.
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">foldr</span> (<span class="org-variable-name">&amp;&amp;</span>) <span class="org-type">True</span> <span class="org-variable-name">.</span> map (<span class="org-variable-name">&gt;=</span>0)
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">and = foldr (&amp;&amp;) True</span>
and <span class="org-function-name">.</span> map (<span class="org-variable-name">&gt;=</span>0) <span class="org-comment-delimiter">-- </span><span class="org-comment">Answer 1</span>
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">all f = and . map f</span>
<span class="org-function-name">all</span> (<span class="org-variable-name">&gt;=</span>0) <span class="org-comment-delimiter">-- </span><span class="org-comment">Answer 2</span>
</pre>
</div>
<p>
Furthermore, Answer 4 is also equivalent, as the following derivation
shows:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">foldr</span> (<span class="org-variable-name">&amp;&amp;</span>) <span class="org-type">True</span> <span class="org-variable-name">.</span> map (<span class="org-variable-name">&gt;=</span>0)
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">&#951;-expansion on the (&amp;&amp;)</span>
<span class="org-function-name">foldr</span> (<span class="org-variable-name">\</span>a b <span class="org-variable-name">-&gt;</span> a <span class="org-variable-name">&amp;&amp;</span> b) <span class="org-type">True</span> <span class="org-variable-name">.</span> map (<span class="org-variable-name">&gt;=</span>0)
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">We have a fold/map rule</span>
  <span class="org-comment-delimiter">-- </span><span class="org-comment">foldr (\x y -&gt; z) . map f = foldr (\x y -&gt; z[x := f x])</span>
  <span class="org-comment-delimiter">-- </span><span class="org-comment">(where z[x:=f x] is a substitution).</span>
<span class="org-function-name">foldr</span> (<span class="org-variable-name">\</span>a b <span class="org-variable-name">-&gt;</span> (<span class="org-variable-name">&gt;=</span> 0) a <span class="org-variable-name">&amp;&amp;</span> b) <span class="org-type">True</span>
<span class="org-variable-name">=</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Nicer syntax</span>
<span class="org-function-name">foldr</span> (<span class="org-variable-name">\</span>a b <span class="org-variable-name">-&gt;</span> a <span class="org-variable-name">&gt;=</span> 0 <span class="org-variable-name">&amp;&amp;</span> b) <span class="org-type">True</span> <span class="org-comment-delimiter">-- </span><span class="org-comment">Answer 4</span>
</pre>
</div>

</div>


</div>
</div>
</div>
<div id="footnotes">
<h2 class="footnotes">Footnotes: </h2>
<div id="text-footnotes">

<div class="footdef"><sup><a id="fn.1" class="footnum" href="#fnr.1">1</a></sup> <div class="footpara"><p class="footpara">
: By "equivalent", we mean will evaluate to equal results. 
We consider two functions equal if, for any input, they produce 
equal outputs (functional extensionality).
</p></div></div>


</div>
</div><div class='submission_box'> Submission is already closed for this quiz. You can click <a href='https://cgi.cse.unsw.edu.au/~cs3141/cgi-bin/gal/19t2/submit_quiz?quizname=quiz02'>here</a> to check your submission (if any). </div></div>
<div id="postamble" class="status">
<p class='date'> 2019-08-07 Wed 18:15 </p><small><a type='application/rss+xml' href='https://www.cse.unsw.edu.au/~cs3141/19t2/index.xml'>Announcements RSS</a></small>
</div>
</body>
</html>
