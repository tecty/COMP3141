<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-08-07 Wed 18:15 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Quiz (Week 6)</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Liam O'Connor" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel='stylesheet' type='text/css' href='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/bundle.css'/><link rel='alternate' type='application/rss+xml'
                                       href='https://www.cse.unsw.edu.au/~cs3141/19t2/index.xml' title='RSS for announcements'><script src='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/bundle.js' type='text/javascript' ></script><script src='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/collapses.js' type='text/javascript' ></script>
                                       <meta http-equiv='Content-Type' content='text/html;charset=UTF-8' />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2017 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="preamble" class="status">
<img src="http://www.cse.unsw.edu.au/~cs3141/19t2/statics/title.png" alt="COMP3141 Software System Design and Implementation"
     style="position:absolute; left:0px; top:0px; z-index:-1;max-width:800px;width:100%;"/>
<p style="text-align:center; font-weight:bold; display:block;">Software System Design and Implementation</p>
<small style="text-align:center; display:block;">Term 2, 2019</small>
<hr/>
<ul class="org-ul collapsibleList">
<li><a href="../index.html">Announcements</a></li>
<li><a href="../outline.html">Course Outline</a></li>
<li><a href="../Lectures.html">Course Schedule</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs3141/cgi-bin/gal/19t2/gallery">Gallery</a></li>
<li><a href="https://moodle.telt.unsw.edu.au/course/view.php?id=40872">Moodle - Recordings</a></li>
<li><a href="https://piazza.com/class/jw3no041p794do">Piazza Forum</a></li>
<li><a href="../HaskellSetup.html">Setting up Haskell</a></li>
<li>Assignment 1
<ul class="org-ul collapsibleList">
<li><a href="../Assignment 1/code.html">Code </a></li>
<li><a href="../Assignment 1/Spec.pdf">Spec</a></li>
</ul></li>
<li>Assignment 2
<ul class="org-ul collapsibleList">
<li><a href="../Assignment 2/code.html">Code </a></li>
<li><a href="../Assignment 2/Spec.pdf">Spec</a></li>
</ul></li>
<li>Exam
<ul class="org-ul collapsibleList">
<li><a href="../Exam/Sample Exam.pdf">Sample Exam</a></li>
<li><a href="../Exam/Sample Solutions.pdf">Sample Solutions</a></li>
</ul></li>
<li>Week 1
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/Quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/1Tue/Code.html">Code </a></li>
<li><a href="../Week 01/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 01/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/2Wed/Code.html">Code </a></li>
<li><a href="../Week 01/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 01/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 2
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/exercise.html">Exercise </a></li>
<li><a href="../Week 02/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/1Tue/Board.pdf">Board</a></li>
<li><a href="../Week 02/1Tue/Code.html">Code </a></li>
<li><a href="../Week 02/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 02/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/2Wed/Board.pdf">Board</a></li>
<li><a href="../Week 02/2Wed/Code.html">Code </a></li>
<li><a href="../Week 02/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 02/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 3
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/exercise.html">Exercise </a></li>
<li><a href="../Week 03/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/1Tue/Code.html">Code </a></li>
<li><a href="../Week 03/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 03/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/2Wed/Code.html">Code </a></li>
<li><a href="../Week 03/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 03/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 4
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/exercise.html">Exercise </a></li>
<li><a href="../Week 04/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/1Tue/code.html">Code </a></li>
<li><a href="../Week 04/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 04/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/2Wed/Code.html">Code </a></li>
<li><a href="../Week 04/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 04/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 6
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/exercise.html">Exercise </a></li>
<li><a href="../Week 06/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/1Tue/Code.html">Code </a></li>
<li><a href="../Week 06/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 06/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/2Wed/Code.html">Code </a></li>
<li><a href="../Week 06/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 06/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 7
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/notes.html">Additional Reading </a></li>
<li><a href="../Week 07/exercise.html">Exercise </a></li>
<li><a href="../Week 07/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/1Tue/Code.html">Code </a></li>
<li><a href="../Week 07/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 07/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/2Wed/code.html">Code </a></li>
<li><a href="../Week 07/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 07/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 8
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/exercise.html">Exercise </a></li>
<li><a href="../Week 08/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/1Tue/Code.html">Code </a></li>
<li><a href="../Week 08/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 08/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/2Wed/Code.html">Code </a></li>
<li><a href="../Week 08/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 08/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 9
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/1Tue/Board.pdf">Board</a></li>
<li><a href="../Week 09/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 09/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/2Wed/Code.html">Code </a></li>
<li><a href="../Week 09/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 09/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 10
<ul class="org-ul collapsibleList">
<li><a href="../Week 10/Guest Slides.pdf">Guest Slides</a></li>
</ul></li>
</ul>
<script type='text/javascript'>CollapsibleLists.apply();</script>
</div>
<div id="content">
<h1 class="title">Quiz (Week 6)</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgdd6a87a">1. Functors</a>
<ul>
<li><a href="#org6d45ec7">1.1. Question 1</a></li>
<li><a href="#org5f35414">1.2. Question 2</a></li>
</ul>
</li>
<li><a href="#org426964f">2. Applicatives</a>
<ul>
<li><a href="#org09c4847">2.1. Question 3</a></li>
<li><a href="#org6a3c6f3">2.2. Question 4</a></li>
<li><a href="#orgc186237">2.3. Question 5</a></li>
</ul>
</li>
<li><a href="#org898f6c9">3. Monads</a>
<ul>
<li><a href="#org4d8f705">3.1. Question 6</a></li>
<li><a href="#org6353e97">3.2. Question 7</a></li>
<li><a href="#org8d57595">3.3. Question 8</a></li>
</ul>
</li>
</ul>
</div>
</div>


<div id="outline-container-orgdd6a87a" class="outline-2">
<h2 id="orgdd6a87a"><span class="section-number-2">1</span> Functors</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-org6d45ec7" class="outline-3">
<h3 id="org6d45ec7"><span class="section-number-3">1.1</span> Question 1</h3>
<div class="outline-text-3" id="text-1-1">
<p>
Which of the following type definitions admit law-abiding instances of <code>Functor</code>?
</p>

<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><code>Maybe</code></li>
<li><span class='mark mark_incorrect'>✗</span><code>String</code></li>
<li><span class='mark mark_correct'>✔</span><code>(-&gt;) a</code> for any <code>a</code></li>
<li><span class='mark mark_correct'>✔</span><code>(,) a</code> for any <code>a</code></li>
<li><span class='mark mark_correct'>✔</span><code>IO</code></li>
<li><span class='mark mark_correct'>✔</span><code>[ ]</code></li>
<li><span class='mark mark_correct'>✔</span><code>Gen</code></li>
<li><span class='mark mark_correct'>✔</span><p>
<code>Tree</code> where:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">data</span> <span class="org-type">Tree</span> a <span class="org-variable-name">=</span> <span class="org-type">Leaf</span> <span class="org-variable-name">|</span> <span class="org-type">Branch</span> a (<span class="org-type">Tree</span> a) (<span class="org-type">Tree</span> a)
</pre>
</div></li>
</ol>

</div>

<div class="NOTES">
<p>
Every one of these is a functor except for <code>String</code>, which is not a type constructor and therefore cannot be a <code>Functor</code>. <code>IO</code> is an abstract type
that implements <code>Functor</code>, as is <code>Gen</code>. The others have the following implementations:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Functor</span> <span class="org-type">Maybe</span> <span class="org-keyword">where</span>
  fmap <span class="org-variable-name">::</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> <span class="org-type">Maybe</span> a <span class="org-variable-name">-&gt;</span> <span class="org-type">Maybe</span> b
  fmap f (<span class="org-type">Just</span> x) <span class="org-variable-name">=</span> <span class="org-type">Just</span> (f x)
  fmap f <span class="org-type">Nothing</span>  <span class="org-variable-name">=</span> <span class="org-type">Nothing</span>

<span class="org-keyword">instance</span> <span class="org-type">Functor</span> ((<span class="org-variable-name">-&gt;</span>) x) <span class="org-keyword">where</span>
  fmap <span class="org-variable-name">::</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> (x <span class="org-variable-name">-&gt;</span> a) <span class="org-variable-name">-&gt;</span> (x <span class="org-variable-name">-&gt;</span> b)
  fmap ab xa x <span class="org-variable-name">=</span> ab (xa x)

<span class="org-keyword">instance</span> <span class="org-type">Functor</span> (<span class="org-type">(,)</span> x) <span class="org-keyword">where</span>
  fmap <span class="org-variable-name">::</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> (x, a) <span class="org-variable-name">-&gt;</span> (x, b)
  fmap f (x, a) <span class="org-variable-name">=</span> (x, f x)

<span class="org-keyword">instance</span> <span class="org-type">Functor</span> [ ] <span class="org-keyword">where</span>
  fmap <span class="org-variable-name">::</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> [b]
  fmap <span class="org-variable-name">=</span> map

<span class="org-keyword">instance</span> <span class="org-type">Functor</span> <span class="org-type">Tree</span> <span class="org-keyword">where</span>
  fmap <span class="org-variable-name">::</span> (a <span class="org-variable-name">-&gt;</span> b) <span class="org-variable-name">-&gt;</span> <span class="org-type">Tree</span> a <span class="org-variable-name">-&gt;</span> <span class="org-type">Tree</span> b
  fmap f <span class="org-type">Leaf</span> <span class="org-variable-name">=</span> <span class="org-type">Leaf</span>
  fmap f (<span class="org-type">Branch</span> x l r) <span class="org-variable-name">=</span> <span class="org-type">Branch</span> (f x) (fmap f l) (fmap f r)
</pre>
</div>

</div>

</div>
</div>

<div id="outline-container-org5f35414" class="outline-3">
<h3 id="org5f35414"><span class="section-number-3">1.2</span> Question 2</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Here is a data type definition for a non-empty list in Haskell.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">data</span> <span class="org-type">NonEmptyList</span> a <span class="org-variable-name">=</span> <span class="org-type">One</span> a <span class="org-variable-name">|</span> <span class="org-type">Cons</span> a (<span class="org-type">NonEmptyList</span> a)
</pre>
</div>

<p>
Which of the following are law-abiding <code>Functor</code> instances for <code>NonEmptyList</code>?
</p>

<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Functor</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  fmap f (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  fmap f (<span class="org-type">Cons</span> x xs) <span class="org-variable-name">=</span> <span class="org-type">Cons</span> (f x) (fmap f xs)
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Functor</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  fmap f (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  fmap f (<span class="org-type">Cons</span> x xs) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Functor</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  fmap f (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  fmap f (<span class="org-type">Cons</span> x xs) <span class="org-variable-name">=</span> <span class="org-type">Cons</span> (f x) (<span class="org-type">Cons</span> (f x) (fmap f xs))
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Functor</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  fmap f (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  fmap f (<span class="org-type">Cons</span> x xs) <span class="org-variable-name">=</span> <span class="org-type">Cons</span> (f (f x)) (fmap f xs)
</pre>
</div></li>
</ol>

</div>
<div class="NOTES">
<p>
Option 1 obeys the functor laws. Proof by induction of the first law (<code>fmap id xs = xs</code>):
Base case, when <code class="src src-haskell"><span class="org-function-name">xs</span> <span class="org-variable-name">=</span> <span class="org-type">One</span> x</code>:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">fmap</span> id (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (id x)   <span class="org-comment-delimiter">-- </span><span class="org-comment">Definition of fmap</span>
                <span class="org-variable-name">=</span> <span class="org-type">One</span> x        <span class="org-comment-delimiter">-- </span><span class="org-comment">Definition of id</span>
                <span class="org-variable-name">=</span> xs           <span class="org-comment-delimiter">-- </span><span class="org-comment">as required.</span>
</pre>
</div>
<p>
Inductive case, assuming <code class="src src-haskell"><span class="org-function-name">xs</span> <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x xs'</code>, with the inductive
hypothesis that <code class="src src-haskell"><span class="org-function-name">fmap</span> id xs' <span class="org-variable-name">=</span> xs'</code>:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">fmap</span> id (<span class="org-type">Cons</span> x xs') <span class="org-variable-name">=</span> <span class="org-type">Cons</span> (id x) (fmap id xs')  <span class="org-comment-delimiter">-- </span><span class="org-comment">Definition of fmap</span>
                     <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x (fmap id xs')       <span class="org-comment-delimiter">-- </span><span class="org-comment">Definition of id</span>
                     <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x xs'                 <span class="org-comment-delimiter">-- </span><span class="org-comment">Inductive hypothesis</span>
                     <span class="org-variable-name">=</span> xs                         <span class="org-comment-delimiter">-- </span><span class="org-comment">as required.</span>
</pre>
</div>

<p>
The composition law (<code>fmap f (fmap g xs) = fmap (f . g) xs</code>) follows from <a href="https://people.mpi-sws.org/~dreyer/tor/papers/wadler.pdf">parametricity</a>.
</p>

<p>
Options 2 and 3 do not obey the first law, as <code class="src src-haskell"><span class="org-function-name">fmap</span> id (<span class="org-type">Cons</span> 3 (<span class="org-type">One</span> 1))</code>
does not equal <code class="src src-haskell"><span class="org-type">Cons</span> 3 (<span class="org-type">One</span> 1)</code>, and option 4 is not type correct
as <code class="src src-haskell"><span class="org-function-name">f</span> <span class="org-variable-name">::</span> a <span class="org-variable-name">-&gt;</span> b</code>, not <code class="src src-haskell">a <span class="org-variable-name">-&gt;</span> a</code>.
</p>

</div>

</div>
</div>
</div>
<div id="outline-container-org426964f" class="outline-2">
<h2 id="org426964f"><span class="section-number-2">2</span> Applicatives</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-org09c4847" class="outline-3">
<h3 id="org09c4847"><span class="section-number-3">2.1</span> Question 3</h3>
<div class="outline-text-3" id="text-2-1">
<p>
Which of the following type definitions are examples of <code>Applicative</code>?
</p>

<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><code>Maybe</code></li>
<li><span class='mark mark_incorrect'>✗</span><code>String</code></li>
<li><span class='mark mark_correct'>✔</span><code>(-&gt;) a</code> for any <code>a</code></li>
<li><span class='mark mark_incorrect'>✗</span><code>(,) a</code> for any <code>a</code></li>
<li><span class='mark mark_correct'>✔</span><code>IO</code></li>
<li><span class='mark mark_correct'>✔</span><code>[ ]</code></li>
<li><span class='mark mark_correct'>✔</span><code>Gen</code></li>
</ol>

</div>

<div class="NOTES">
<p>
Once again, <code>String</code> is not a type constructor, so cannot be an <code>Applicative</code>. Furthermore <code>(,) a</code>
does not admit a law-abiding applicative instance either, as we cannot implement <code>pure</code>:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Applicative</span> (<span class="org-type">(,)</span> x) <span class="org-keyword">where</span>
  pure <span class="org-variable-name">::</span> a <span class="org-variable-name">-&gt;</span> (x, a)
  pure a <span class="org-variable-name">=</span> (<span class="org-variable-name">???</span> , a)
</pre>
</div>

<p>
Of the other options, <code>Gen</code> and <code>IO</code> are both applicatives, as are <code>Maybe</code>, <code>(-&gt;) a</code> and <code>[ ]</code> as follows:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Applicative</span> <span class="org-type">Maybe</span> <span class="org-keyword">where</span>
  pure x <span class="org-variable-name">=</span> <span class="org-type">Just</span> x
  <span class="org-type">Just</span> f <span class="org-variable-name">&lt;*&gt;</span> <span class="org-type">Just</span> x <span class="org-variable-name">=</span> <span class="org-type">Just</span> (f x)
  <span class="org-keyword">_</span>      <span class="org-variable-name">&lt;*&gt;</span> <span class="org-keyword">_</span>      <span class="org-variable-name">=</span> <span class="org-type">Nothing</span> 

<span class="org-keyword">instance</span> <span class="org-type">Applicative</span> ((<span class="org-variable-name">-&gt;</span>) x) <span class="org-keyword">where</span>
  pure a <span class="org-variable-name">=</span> <span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> a
  (xf <span class="org-variable-name">&lt;*&gt;</span> xa) x <span class="org-variable-name">=</span> xf x (xa x)

<span class="org-keyword">instance</span> <span class="org-type">Applicative</span> [ ] <span class="org-keyword">where</span>
  pure a <span class="org-variable-name">=</span> [ a ]
  <span class="org-type">[]</span> <span class="org-variable-name">&lt;*&gt;</span> ys <span class="org-variable-name">=</span> <span class="org-type">[]</span>
  (f<span class="org-type">:</span>fs) <span class="org-variable-name">&lt;*&gt;</span> xs <span class="org-variable-name">=</span> map f xs <span class="org-variable-name">++</span> (fs <span class="org-variable-name">&lt;*&gt;</span> xs) 
</pre>
</div>

</div>

</div>
</div>

<div id="outline-container-org6a3c6f3" class="outline-3">
<h3 id="org6a3c6f3"><span class="section-number-3">2.2</span> Question 4</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Here is a data type definition for a non-empty list in Haskell.
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">data</span> <span class="org-type">NonEmptyList</span> a <span class="org-variable-name">=</span> <span class="org-type">One</span> a <span class="org-variable-name">|</span> <span class="org-type">Cons</span> a (<span class="org-type">NonEmptyList</span> a)
</pre>
</div>

<p>
Which of the following are law-abiding <code>Applicative</code> instances for <code>NonEmptyList</code>?
</p>

<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Applicative</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  pure x <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x (pure x)
  (<span class="org-type">One</span> f) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  (<span class="org-type">One</span> f) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">Cons</span> x <span class="org-keyword">_</span>) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  (<span class="org-type">Cons</span> f <span class="org-keyword">_</span>) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  (<span class="org-type">Cons</span> f fs) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">Cons</span> x xs) <span class="org-variable-name">=</span> <span class="org-type">Cons</span> (f x) (fs <span class="org-variable-name">&lt;*&gt;</span> xs)
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Applicative</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  pure x <span class="org-variable-name">=</span> <span class="org-type">One</span> x
  (<span class="org-type">One</span> f) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  (<span class="org-type">One</span> f) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">Cons</span> x <span class="org-keyword">_</span>) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  (<span class="org-type">Cons</span> f <span class="org-keyword">_</span>) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">One</span> x) <span class="org-variable-name">=</span> <span class="org-type">One</span> (f x)
  (<span class="org-type">Cons</span> f fs) <span class="org-variable-name">&lt;*&gt;</span> (<span class="org-type">Cons</span> x xs) <span class="org-variable-name">=</span> <span class="org-type">Cons</span> (f x) (fs <span class="org-variable-name">&lt;*&gt;</span> xs)
</pre>
</div></li>
<li><span class='mark mark_correct'>✔</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Applicative</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  pure x <span class="org-variable-name">=</span> <span class="org-type">One</span> x
  <span class="org-type">One</span> f <span class="org-variable-name">&lt;*&gt;</span> xs <span class="org-variable-name">=</span> fmap f xs 
  (<span class="org-type">Cons</span> f fs) <span class="org-variable-name">&lt;*&gt;</span> xs <span class="org-variable-name">=</span> fmap f xs <span class="org-variable-name">`append`</span> (fs <span class="org-variable-name">&lt;*&gt;</span> xs)
    <span class="org-keyword">where</span>
     append (<span class="org-type">One</span> x) ys <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x ys
     append (<span class="org-type">Cons</span> x xs) ys <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x (xs <span class="org-variable-name">`append`</span> ys)
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Applicative</span> <span class="org-type">NonEmptyList</span> <span class="org-keyword">where</span>
  pure x <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x (pure x)
  <span class="org-type">One</span> f <span class="org-variable-name">&lt;*&gt;</span> xs <span class="org-variable-name">=</span> fmap f xs 
  (<span class="org-type">Cons</span> f fs) <span class="org-variable-name">&lt;*&gt;</span> xs <span class="org-variable-name">=</span> fmap f xs <span class="org-variable-name">`append`</span> (fs <span class="org-variable-name">&lt;*&gt;</span> xs)
    <span class="org-keyword">where</span>
     append (<span class="org-type">One</span> x) ys <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x ys
     append (<span class="org-type">Cons</span> x xs) ys <span class="org-variable-name">=</span> <span class="org-type">Cons</span> x (xs <span class="org-variable-name">`append`</span> ys)
</pre>
</div></li>
</ol>

</div>
<div class="NOTES">
<p>
Option 3 is analogous to the same <code>Applicative</code> instance we knows from regular lists, so is a valid <code>Applicative</code> instance.
Options 2 and 4 don't obey the first <code>Applicative</code> law, <code class="src src-haskell"><span class="org-function-name">pure</span> id <span class="org-variable-name">&lt;*&gt;</span> v <span class="org-variable-name">=</span> v</code>.
Option 1 is also a valid applicative instance, analogous to the <code>ZipList</code> instance available in the Haskell standard library.
</p>

</div>

</div>
</div>

<div id="outline-container-orgc186237" class="outline-3">
<h3 id="orgc186237"><span class="section-number-3">2.3</span> Question 5</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Suppose I wanted to write a function <code>pair</code>, which takes two <code>Applicative</code> data structures and combines them in a tuple, of type:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">pair</span> <span class="org-variable-name">::</span> (<span class="org-type">Applicative</span> f) <span class="org-variable-name">=&gt;</span> f a <span class="org-variable-name">-&gt;</span> f b <span class="org-variable-name">-&gt;</span> f (a, b)
</pre>
</div>

<p>
Select all correct implementations of <code>pair</code>.
</p>

<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">pair</span> fa fb <span class="org-variable-name">=</span> pure fa <span class="org-variable-name">&lt;*&gt;</span> pure fb
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">pair</span> fa fb <span class="org-variable-name">=</span> pure <span class="org-type">(,)</span> <span class="org-variable-name">&lt;*&gt;</span> pure fa <span class="org-variable-name">&lt;*&gt;</span> pure fb
</pre>
</div></li>
<li><span class='mark mark_correct'>✔</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">pair</span> fa fb <span class="org-variable-name">=</span> pure <span class="org-type">(,)</span> <span class="org-variable-name">&lt;*&gt;</span> fa <span class="org-variable-name">&lt;*&gt;</span> fb
</pre>
</div></li>
<li><span class='mark mark_correct'>✔</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">pair</span> fa fb <span class="org-variable-name">=</span> fmap <span class="org-type">(,)</span> fa <span class="org-variable-name">&lt;*&gt;</span> fb
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span>There is no way to implement this function.</li>
</ol>

</div>
<div class="NOTES">
<p>
Options 1 and 2 are not type correct.
</p>

<p>
Options 3 and 4 are both correct, and equivalent, as <code class="src src-haskell"><span class="org-function-name">fmap</span> f x <span class="org-variable-name">=</span> (pure f <span class="org-variable-name">&lt;*&gt;</span> x)</code>, if the <code>Applicative</code> and <code>Functor</code> instances
are law-abiding.
</p>

</div>

</div>
</div>
</div>
<div id="outline-container-org898f6c9" class="outline-2">
<h2 id="org898f6c9"><span class="section-number-2">3</span> Monads</h2>
<div class="outline-text-2" id="text-3">
</div>
<div id="outline-container-org4d8f705" class="outline-3">
<h3 id="org4d8f705"><span class="section-number-3">3.1</span> Question 6</h3>
<div class="outline-text-3" id="text-3-1">
<p>
Which of the following type definitions are examples of <code>Monad</code>, or admit
law-abiding <code>Monad</code> instances?
</p>

<div class="CHECK">
<ol class="org-ol">
<li><span class='mark mark_correct'>✔</span><code>Maybe</code></li>
<li><span class='mark mark_incorrect'>✗</span><code>String</code></li>
<li><span class='mark mark_correct'>✔</span><code>(-&gt;) a</code> for any <code>a</code></li>
<li><span class='mark mark_incorrect'>✗</span><code>(,) a</code> for any <code>a</code></li>
<li><span class='mark mark_correct'>✔</span><code>IO</code></li>
<li><span class='mark mark_correct'>✔</span><code>[ ]</code></li>
<li><span class='mark mark_correct'>✔</span><code>Gen</code></li>
<li><span class='mark mark_incorrect'>✗</span><p>
<code>Tree</code> where:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">data</span> <span class="org-type">Tree</span> a <span class="org-variable-name">=</span> <span class="org-type">Leaf</span> <span class="org-variable-name">|</span> <span class="org-type">Branch</span> a (<span class="org-type">Tree</span> a) (<span class="org-type">Tree</span> a)
</pre>
</div></li>
</ol>

</div>

<div class="NOTES">
<p>
Monad instances can be written for <code>Maybe</code>, <code>(-&gt;) a</code> and <code>[ ]</code>, and <code>IO</code> and <code>Gen</code> are
abstract types that also implement <code>Monad</code>. The <code>Tree</code> type is not a (straightforward) instance
of <code>Monad</code>, as we would have to somehow transform a <code>Tree (Tree a)</code> into a <code>Tree a</code> in a structure-preserving
way, which I'm pretty sure is impossible.
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">instance</span> <span class="org-type">Monad</span> <span class="org-type">Maybe</span> <span class="org-keyword">where</span>
  <span class="org-type">Just</span> x  <span class="org-variable-name">&gt;&gt;=</span> f <span class="org-variable-name">=</span> f x
  <span class="org-type">Nothing</span> <span class="org-variable-name">&gt;&gt;=</span> f <span class="org-variable-name">=</span> <span class="org-type">Nothing</span>

<span class="org-keyword">instance</span> <span class="org-type">Monad</span> ((<span class="org-variable-name">-&gt;</span>) x) <span class="org-keyword">where</span>
  (xa <span class="org-variable-name">&gt;&gt;=</span> axb) <span class="org-variable-name">=</span> <span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> axb (xa x) x

<span class="org-keyword">instance</span> <span class="org-type">Monad</span> [ ] <span class="org-keyword">where</span>
  xs <span class="org-variable-name">&gt;&gt;=</span> each <span class="org-variable-name">=</span> concatMap each xs
</pre>
</div>

</div>

</div>
</div>

<div id="outline-container-org6353e97" class="outline-3">
<h3 id="org6353e97"><span class="section-number-3">3.2</span> Question 7</h3>
<div class="outline-text-3" id="text-3-2">
<p>
We wish to write a function <code>s</code> of type <code>[m a] -&gt; m [a]</code>, for any monad <code>m</code>. 
It will unpack each given value of type <code>m a</code> and collect their results into a list.
Which of the following is a correct implementation
of this function?
</p>

<div class="MULTI">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">s</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> [m a] <span class="org-variable-name">-&gt;</span> m [a]
<span class="org-function-name">s</span> <span class="org-type">[]</span> <span class="org-variable-name">=</span> <span class="org-type">[]</span>
<span class="org-function-name">s</span> (a<span class="org-type">:</span>as) <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
  x <span class="org-variable-name">&lt;-</span> a
  xs <span class="org-variable-name">&lt;-</span> s as
  pure (x <span class="org-type">:</span> xs)
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">s</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> [m a] <span class="org-variable-name">-&gt;</span> m [a]
<span class="org-function-name">s</span> <span class="org-type">[]</span> <span class="org-variable-name">=</span> return <span class="org-type">[]</span>
<span class="org-function-name">s</span> (a<span class="org-type">:</span>as) <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
  x <span class="org-variable-name">&lt;-</span> a
  xs <span class="org-variable-name">&lt;-</span> as
  pure (x <span class="org-type">:</span> xs)
</pre>
</div></li>
<li><span class='mark mark_correct'>✔</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">s</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> [m a] <span class="org-variable-name">-&gt;</span> m [a]
<span class="org-function-name">s</span> <span class="org-type">[]</span> <span class="org-variable-name">=</span> return <span class="org-type">[]</span>
<span class="org-function-name">s</span> (a<span class="org-type">:</span>as) <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
  x <span class="org-variable-name">&lt;-</span> a
  xs <span class="org-variable-name">&lt;-</span> s as
  pure (x <span class="org-type">:</span> xs)
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">s</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> [m a] <span class="org-variable-name">-&gt;</span> m [a]
<span class="org-function-name">s</span> <span class="org-type">[]</span> <span class="org-variable-name">=</span> return <span class="org-type">[]</span>
<span class="org-function-name">s</span> (a<span class="org-type">:</span>as) <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
  a
  s as
  pure (a <span class="org-type">:</span> as)
</pre>
</div></li>
</ol>

</div>
<div class="NOTES">
<p>
Only answer 3 is type correct.
</p>

</div>

</div>
</div>
<div id="outline-container-org8d57595" class="outline-3">
<h3 id="org8d57595"><span class="section-number-3">3.3</span> Question 8</h3>
<div class="outline-text-3" id="text-3-3">
<p>
Now suppose we wish to write a function <code>m</code> of type, which applies a given function
to each element of a list and collects the results:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">m</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> (a <span class="org-variable-name">-&gt;</span> m b) <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> m [b]
</pre>
</div>

<p>
What is a correct implementation of <code>m</code>?
</p>

<div class="MULTI">
<ol class="org-ol">
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">m</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> (a <span class="org-variable-name">-&gt;</span> m b) <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> m [b]
<span class="org-function-name">m</span> f <span class="org-type">[]</span> <span class="org-variable-name">=</span> <span class="org-type">[]</span>
<span class="org-function-name">m</span> f (x<span class="org-type">:</span>xs) <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
  y <span class="org-variable-name">&lt;-</span> f x
  ys <span class="org-variable-name">&lt;-</span> m f xs
  return (y<span class="org-type">:</span>ys)
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">m</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> (a <span class="org-variable-name">-&gt;</span> m b) <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> m [b]
<span class="org-function-name">m</span> f <span class="org-type">[]</span> <span class="org-variable-name">=</span> <span class="org-type">[]</span>
<span class="org-function-name">m</span> f (x<span class="org-type">:</span>xs) <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
  y <span class="org-variable-name">&lt;-</span> f x
  ys <span class="org-variable-name">&lt;-</span> f xs
  return (y<span class="org-type">:</span>ys)
</pre>
</div></li>
<li><span class='mark mark_correct'>✔</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">m</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> (a <span class="org-variable-name">-&gt;</span> m b) <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> m [b]
<span class="org-function-name">m</span> f <span class="org-variable-name">=</span> s <span class="org-variable-name">.</span> map f
</pre>
</div></li>
<li><span class='mark mark_incorrect'>✗</span><div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">m</span> <span class="org-variable-name">::</span> <span class="org-type">Monad</span> m <span class="org-variable-name">=&gt;</span> (a <span class="org-variable-name">-&gt;</span> m b) <span class="org-variable-name">-&gt;</span> [a] <span class="org-variable-name">-&gt;</span> m [b]
<span class="org-function-name">m</span> <span class="org-variable-name">=</span> s <span class="org-variable-name">.</span> map
</pre>
</div></li>
</ol>

</div>
<div class="NOTES">
<p>
Only answer 3 is type correct.
</p>

</div>

</div>
</div>
</div>
<div class='submission_box'> Submission is already closed for this quiz. You can click <a href='https://cgi.cse.unsw.edu.au/~cs3141/cgi-bin/gal/19t2/submit_quiz?quizname=quiz06'>here</a> to check your submission (if any). </div></div>
<div id="postamble" class="status">
<p class='date'> 2019-08-07 Wed 18:15 </p><small><a type='application/rss+xml' href='https://www.cse.unsw.edu.au/~cs3141/19t2/index.xml'>Announcements RSS</a></small>
</div>
</body>
</html>
