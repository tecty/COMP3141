<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">
<head>
<!-- 2019-08-07 Wed 18:15 -->
<meta http-equiv="Content-Type" content="text/html;charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Exercise (Week 7)</title>
<meta name="generator" content="Org mode" />
<meta name="author" content="Liam O'Connor" />
<style type="text/css">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-hledger:before { content: 'hledger'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per "defun org-babel-execute"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf " ")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>
<link rel='stylesheet' type='text/css' href='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/bundle.css'/><link rel='alternate' type='application/rss+xml'
                                       href='https://www.cse.unsw.edu.au/~cs3141/19t2/index.xml' title='RSS for announcements'><script src='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/bundle.js' type='text/javascript' ></script><script src='https://www.cse.unsw.edu.au/~cs3141/19t2/statics/collapses.js' type='text/javascript' ></script>
                                       <meta http-equiv='Content-Type' content='text/html;charset=UTF-8' />
<script type="text/javascript">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2017 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = "code-highlighted";
     elem.className   = "code-highlighted";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>
</head>
<body>
<div id="preamble" class="status">
<img src="http://www.cse.unsw.edu.au/~cs3141/19t2/statics/title.png" alt="COMP3141 Software System Design and Implementation"
     style="position:absolute; left:0px; top:0px; z-index:-1;max-width:800px;width:100%;"/>
<p style="text-align:center; font-weight:bold; display:block;">Software System Design and Implementation</p>
<small style="text-align:center; display:block;">Term 2, 2019</small>
<hr/>
<ul class="org-ul collapsibleList">
<li><a href="../index.html">Announcements</a></li>
<li><a href="../outline.html">Course Outline</a></li>
<li><a href="../Lectures.html">Course Schedule</a></li>
<li><a href="https://cgi.cse.unsw.edu.au/~cs3141/cgi-bin/gal/19t2/gallery">Gallery</a></li>
<li><a href="https://moodle.telt.unsw.edu.au/course/view.php?id=40872">Moodle - Recordings</a></li>
<li><a href="https://piazza.com/class/jw3no041p794do">Piazza Forum</a></li>
<li><a href="../HaskellSetup.html">Setting up Haskell</a></li>
<li>Assignment 1
<ul class="org-ul collapsibleList">
<li><a href="../Assignment 1/code.html">Code </a></li>
<li><a href="../Assignment 1/Spec.pdf">Spec</a></li>
</ul></li>
<li>Assignment 2
<ul class="org-ul collapsibleList">
<li><a href="../Assignment 2/code.html">Code </a></li>
<li><a href="../Assignment 2/Spec.pdf">Spec</a></li>
</ul></li>
<li>Exam
<ul class="org-ul collapsibleList">
<li><a href="../Exam/Sample Exam.pdf">Sample Exam</a></li>
<li><a href="../Exam/Sample Solutions.pdf">Sample Solutions</a></li>
</ul></li>
<li>Week 1
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/Quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/1Tue/Code.html">Code </a></li>
<li><a href="../Week 01/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 01/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 01/2Wed/Code.html">Code </a></li>
<li><a href="../Week 01/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 01/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 2
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/exercise.html">Exercise </a></li>
<li><a href="../Week 02/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/1Tue/Board.pdf">Board</a></li>
<li><a href="../Week 02/1Tue/Code.html">Code </a></li>
<li><a href="../Week 02/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 02/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 02/2Wed/Board.pdf">Board</a></li>
<li><a href="../Week 02/2Wed/Code.html">Code </a></li>
<li><a href="../Week 02/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 02/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 3
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/exercise.html">Exercise </a></li>
<li><a href="../Week 03/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/1Tue/Code.html">Code </a></li>
<li><a href="../Week 03/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 03/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 03/2Wed/Code.html">Code </a></li>
<li><a href="../Week 03/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 03/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 4
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/exercise.html">Exercise </a></li>
<li><a href="../Week 04/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/1Tue/code.html">Code </a></li>
<li><a href="../Week 04/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 04/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 04/2Wed/Code.html">Code </a></li>
<li><a href="../Week 04/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 04/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 6
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/exercise.html">Exercise </a></li>
<li><a href="../Week 06/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/1Tue/Code.html">Code </a></li>
<li><a href="../Week 06/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 06/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 06/2Wed/Code.html">Code </a></li>
<li><a href="../Week 06/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 06/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 7
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/notes.html">Additional Reading </a></li>
<li><a href="../Week 07/exercise.html">Exercise </a></li>
<li><a href="../Week 07/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/1Tue/Code.html">Code </a></li>
<li><a href="../Week 07/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 07/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 07/2Wed/code.html">Code </a></li>
<li><a href="../Week 07/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 07/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 8
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/exercise.html">Exercise </a></li>
<li><a href="../Week 08/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/1Tue/Code.html">Code </a></li>
<li><a href="../Week 08/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 08/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 08/2Wed/Code.html">Code </a></li>
<li><a href="../Week 08/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 08/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 9
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/quiz.html">Quiz </a></li>
<li>Tuesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/1Tue/Board.pdf">Board</a></li>
<li><a href="../Week 09/1Tue/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 09/1Tue/Slides.pdf">Slides</a></li>
</ul></li>
<li>Wednesday
<ul class="org-ul collapsibleList">
<li><a href="../Week 09/2Wed/Code.html">Code </a></li>
<li><a href="../Week 09/2Wed/Condensed Slides.pdf">Condensed Slides</a></li>
<li><a href="../Week 09/2Wed/Slides.pdf">Slides</a></li>
</ul></li>
</ul></li>
<li>Week 10
<ul class="org-ul collapsibleList">
<li><a href="../Week 10/Guest Slides.pdf">Guest Slides</a></li>
</ul></li>
</ul>
<script type='text/javascript'>CollapsibleLists.apply();</script>
</div>
<div id="content">
<h1 class="title">Exercise (Week 7)</h1>
<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#orgfb1151b">1. Controlling Effects</a>
<ul>
<li><a href="#orgb08f307">1.1. Basic I/O (2 Marks)</a></li>
<li><a href="#orgc2caee9">1.2. More Intricate I/O (3 Marks)</a></li>
<li><a href="#org1911d7d">1.3. State and Testing IO (4 Marks)</a></li>
</ul>
</li>
<li><a href="#org18cd3c2">2. Submission instructions</a></li>
</ul>
</div>
</div>

<div class="figure">
<p><img src="../statics/Ex05-icon.gif" alt="Ex05-icon.gif" style="width:50px;" />
</p>
</div>

<p>
<b>DUE</b>: Tue 23 July 2019 14:00:00
</p>

<div id="outline-container-orgfb1151b" class="outline-2">
<h2 id="orgfb1151b"><span class="section-number-2">1</span> Controlling Effects</h2>
<div class="outline-text-2" id="text-1">
</div>
<div id="outline-container-orgb08f307" class="outline-3">
<h3 id="orgb08f307"><span class="section-number-3">1.1</span> Basic I/O (2 Marks)</h3>
<div class="outline-text-3" id="text-1-1">
<div class='tabset'><input type=radio name=tabset1 id=tab1_1 checked><label for='tab1_1'>CSE</label><input type=radio name=tabset1 id=tab1_2><label for='tab1_2'>Stack</label><div class="TABS">
<div class="TAB">
<p>
Download the <a href="../statics/Ex05.tar.gz">exercise tarball</a> and extract it to a directory in your 
home directory at CSE. This tarball contains a file, called <code>Ex05.hs</code>,
wherein you will do all of your programming.
</p>

<p>
To test your code, run the following shell commands to open a GHCi 
session:
</p>

<div class="org-src-container">
<pre class="src src-bash">$ 3141
newclass starting new subshell for class COMP3141...
$ cabal repl
Resolving dependencies...
Configuring Ex05-1.0...
Preprocessing executable <span class="org-string">'Ex05'</span> for Ex05-1.0..
GHCi, version 8.2.2: http://www.haskell.org/ghc/  :? for help
[1 of 1] Compiling Ex05          (Ex05.hs, interpreted)
Ok, one module loaded.
*Ex05&gt; capitalise <span class="org-string">"input.txt"</span> <span class="org-string">"output.txt"</span>
...
</pre>
</div>
<p>
Calling <code>IO</code> actions in <code>GHCi</code> as above will execute them, including
their side effects. 
</p>

<p>
Note that you will only need to submit <code>Ex05.hs</code>, so only make changes
to that file.
</p>

</div>

<div class="TAB">
<p>
Download the <a href="../statics/Ex05.tar.gz">exercise tarball</a> and extract it to a directory on
your local machine. This tarball contains a file, called <code>Ex05.hs</code>,
wherein you will do all of your programming.
</p>

<p>
To test your code, run the following shell commands to open a GHCi 
session:
</p>

<div class="org-src-container">
<pre class="src src-bash">$ stack repl
Configuring GHCi with the following packages: Ex05
Using main module: 1. Package <span class="org-string">'Ex05'</span> component exe:Ex05 ...
GHCi, version 8.2.2: http://www.haskell.org/ghc/  :? for help
[1 of 2] Compiling Ex05          (Ex05.hs, interpreted)
[2 of 2] Compiling Main          (Main.hs, interpreted)
Ok, two modules loaded.
*Main Ex05&gt; capitalise <span class="org-string">"input.txt"</span> <span class="org-string">"output.txt"</span>
...
</pre>
</div>
<p>
Calling <code>IO</code> actions in <code>GHCi</code> as above will execute them, including
their side effects. 
</p>

<p>
Note that you will only need to submit <code>Ex05.hs</code>, so only make changes
to that file.
</p>

</div>

</div>

</div><p>
First, there is the I/O function <code>capitalise</code>, of the following type:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">capitalise</span> <span class="org-variable-name">::</span> <span class="org-type">FilePath</span> <span class="org-variable-name">-&gt;</span> <span class="org-type">FilePath</span> <span class="org-variable-name">-&gt;</span> <span class="org-type">IO</span> <span class="org-type">()</span>
</pre>
</div>
<p>
This function reads the text file determined by the first argument and capitalises each character while 
writing the result to the file given in the second argument. 
The program must read all available text from the first file. You may find the functions in <code>System.IO</code> and <code>Data.Char</code> useful.
</p>
</div>
</div>

<div id="outline-container-orgc2caee9" class="outline-3">
<h3 id="orgc2caee9"><span class="section-number-3">1.2</span> More Intricate I/O (3 Marks)</h3>
<div class="outline-text-3" id="text-1-2">
<p>
Write an IO action called <code>sumFile</code>, of the following type:
</p>
<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">sumFile</span> <span class="org-variable-name">::</span> <span class="org-type">IO</span> <span class="org-type">()</span>
</pre>
</div>
<p>
This should retrieve two filenames which are given as a command line arguments, and read the file specified in the first command line argument. 
This file will contain a list of integers, one per line. The <code>sumFile</code> action should write the sum of these numbers into the second file 
given as a command line argument. If you like an additional challenge, do not use any explicit recursion in the program, just the list operators etc. 
from the libraries (Note: There are no extra marks for this, but it is a nice puzzle).
</p>

<p>
Some hints:
</p>

<ul class="org-ul">
<li>To get the command line arguments, look at <code>System.Environment</code></li>
<li>To read files, you can just use the functions <code>readFile</code> for this simple exercise; instead of fussing around with handles.</li>
<li>The standard <code>Prelude</code> (which is the module implicitly imported into any Haskell programs), has a lot of functions for list manipulation.</li>
</ul>

<p>
To run your program, you can use a helper module, <code>Main.hs</code>, provided for you in the code bundle.
</p>

<div class='tabset'><input type=radio name=tabset2 id=tab2_1 checked><label for='tab2_1'>CSE</label><input type=radio name=tabset2 id=tab2_2><label for='tab2_2'>Stack</label><div class="TABS">
<div class="TAB">
<p>
In a <code>3141</code> subshell, type <code>cabal build</code> to build the executable, which you should be able to invoke
by typing <code>./dist/build/Ex05/Ex05 &lt;command line args&gt;</code>. For example:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ 3141
newclass starting new subshell for class COMP3141...

$ cabal build
Resolving dependencies...
Configuring Ex05-1.0...
Preprocessing executable <span class="org-string">'Ex05'</span> for Ex05-1.0..
Building executable <span class="org-string">'Ex05'</span> for Ex05-1.0..
[1 of 2] Compiling Ex05             ( Ex05.hs, ...)
[2 of 2] Compiling Main             ( Main.hs, ...)
Linking dist/build/Ex05/Ex05 ...

$ ./dist/build/Ex05/Ex05 <span class="org-string">"input.txt"</span> <span class="org-string">"output.txt"</span>
</pre>
</div>

</div>
<div class="TAB">
<p>
You can build the project by typing <code>stack build</code>, then execute it by typing <code>stack exec Ex05 -- &lt;command line args&gt;</code>, for example:
</p>

<div class="org-src-container">
<pre class="src src-sh">$ stack build
Ex04-1.0: configure (exe)
Configuring Ex04-1.0...
Ex04-1.0: build (exe)
Preprocessing executable <span class="org-string">'Ex05'</span> for Ex05-1.0..
Building executable <span class="org-string">'Ex05'</span> for Ex05-1.0..
[1 of 2] Compiling Ex05             ( Ex05.hs, ... )
[2 of 2] Compiling Main             ( Main.hs, ... )
Linking ...
Ex05-1.0: copy/register
Installing executable Ex05<span class="org-keyword"> in</span> ...

$ stack exec Ex05 -- <span class="org-string">"input.txt"</span> <span class="org-string">"output.txt"</span>
</pre>
</div>

</div>

</div>
</div>
</div>
</div>

<div id="outline-container-org1911d7d" class="outline-3">
<h3 id="org1911d7d"><span class="section-number-3">1.3</span> State and Testing IO (4 Marks)</h3>
<div class="outline-text-3" id="text-1-3">
<p>
There is a well-known guessing game where, given a number of guesses, the player attempts to guess a number that has been randomly chosen within
a certain range. If the player guesses incorrectly, the only information the player receives is whether the target number is lower or higher than
the player's guess.
</p>

<p>
We will model this using Haskell, defining a <code>Player</code> as a type that consists of a function to make a guess, and a function that can act on the
response given by the game to the player's guess:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-keyword">data</span> <span class="org-type">Player</span> m <span class="org-variable-name">=</span> <span class="org-type">Player</span> { guess <span class="org-variable-name">::</span> m <span class="org-type">Int</span>
                       , wrong <span class="org-variable-name">::</span> <span class="org-type">Answer</span> <span class="org-variable-name">-&gt;</span> m <span class="org-type">()</span> 
                       }
<span class="org-keyword">data</span> <span class="org-type">Answer</span> <span class="org-variable-name">=</span> <span class="org-type">Lower</span> <span class="org-variable-name">|</span> <span class="org-type">Higher</span> 
</pre>
</div>
<p>
We allow a <code>Player</code> to perform arbitrary effects in order to make a guess or to handle responses. For example, the <code>human</code> player is defined
using <code>IO</code>, so as to ask the user for a number, and reports feedback to the user by printing a message to the terminal:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">human</span> <span class="org-variable-name">::</span> <span class="org-type">Player</span> <span class="org-type">IO</span>
<span class="org-function-name">human</span> <span class="org-variable-name">=</span> <span class="org-type">Player</span> { guess <span class="org-variable-name">=</span> guess, wrong <span class="org-variable-name">=</span> wrong }
  <span class="org-keyword">where</span>
    guess <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
      putStrLn <span class="org-string">"Enter a number (1-100):"</span>
      x <span class="org-variable-name">&lt;-</span> getLine
      <span class="org-keyword">case</span> readMaybe x <span class="org-keyword">of</span>
        <span class="org-type">Nothing</span> <span class="org-variable-name">-&gt;</span> guess
        <span class="org-type">Just</span> i  <span class="org-variable-name">-&gt;</span> pure i

    wrong <span class="org-type">Lower</span>  <span class="org-variable-name">=</span> putStrLn <span class="org-string">"Lower!"</span>
    wrong <span class="org-type">Higher</span> <span class="org-variable-name">=</span> putStrLn <span class="org-string">"Higher!"</span>
</pre>
</div>

<p>
The guessing game itself is defined <i>generically</i> for any monad <code>m</code>, so long as we can provide a <code>Player</code> that acts in that monad. You can play 
the guessing game yourself in the <code>IO</code> monad with the <code>human</code> player by calling <code>play</code>:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-comment-delimiter">-- </span><span class="org-comment">x is the number we're trying to guess</span>
<span class="org-comment-delimiter">-- </span><span class="org-comment">n is the number of guesses we get</span>
<span class="org-comment-delimiter">-- </span><span class="org-comment">p is the player</span>
<span class="org-comment-delimiter">-- </span><span class="org-comment">Returns whether or not the player managed to guess correctly </span>
<span class="org-comment-delimiter">-- </span><span class="org-comment">in the time limit</span>
<span class="org-function-name">guessingGame</span> <span class="org-variable-name">::</span> (<span class="org-type">Monad</span> m) <span class="org-variable-name">=&gt;</span> <span class="org-type">Int</span> <span class="org-variable-name">-&gt;</span> <span class="org-type">Int</span> <span class="org-variable-name">-&gt;</span> <span class="org-type">Player</span> m <span class="org-variable-name">-&gt;</span> m <span class="org-type">Bool</span>
<span class="org-function-name">guessingGame</span> x n p <span class="org-variable-name">=</span> go n
  <span class="org-keyword">where</span>
   go 0 <span class="org-variable-name">=</span> pure <span class="org-type">False</span>
   go n <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
     x' <span class="org-variable-name">&lt;-</span> guess p
     <span class="org-keyword">case</span> compare x x' <span class="org-keyword">of</span>
       <span class="org-type">LT</span> <span class="org-variable-name">-&gt;</span> wrong p <span class="org-type">Lower</span>  <span class="org-variable-name">&gt;&gt;</span> go (n<span class="org-variable-name">-</span>1)
       <span class="org-type">GT</span> <span class="org-variable-name">-&gt;</span> wrong p <span class="org-type">Higher</span> <span class="org-variable-name">&gt;&gt;</span> go (n<span class="org-variable-name">-</span>1)
       <span class="org-type">EQ</span> <span class="org-variable-name">-&gt;</span> pure <span class="org-type">True</span>

<span class="org-function-name">play</span> <span class="org-variable-name">::</span> <span class="org-type">IO</span> <span class="org-type">()</span>
<span class="org-function-name">play</span> <span class="org-variable-name">=</span> <span class="org-keyword">do</span>
  x <span class="org-variable-name">&lt;-</span> randomRIO (1,100)
  b <span class="org-variable-name">&lt;-</span> guessingGame x 5 human
  putStrLn (<span class="org-keyword">if</span> b <span class="org-keyword">then</span> <span class="org-string">"You got it!"</span> <span class="org-keyword">else</span> <span class="org-string">"You ran out of guesses!"</span>)
</pre>
</div>

<p>
Your task is to define a new player, <code>ai</code>, which plays the game automatically, by acting in the <code>State (Int, Int)</code> monad instead of
the <code>IO</code> monad:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">ai</span> <span class="org-variable-name">::</span> <span class="org-type">Player</span> (<span class="org-type">State</span> (<span class="org-type">Int</span>,<span class="org-type">Int</span>))
</pre>
</div>

<p>
We would like it to satisfy some properties. Firstly, we would like the <code>ai</code> player never to repeat a guess, that is, the <code>ai</code> player
should guess the number in at most <code>n</code> guesses if the number lies between 1 and <code>n</code>:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">prop_no_repeat</span> (<span class="org-type">Positive</span> n) 
  <span class="org-variable-name">=</span> forAll (choose (1,n)) <span class="org-variable-name">$</span> <span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span> evalState (guessingGame x n ai) (1,n)
</pre>
</div>

<p>
We would further like it to play <i>optimally</i> &#x2013; i.e. making as few guesses as possible. By bisecting the range each time, we can
make a logarithmic number of guesses, proportional to the size of the initial range:
</p>

<div class="org-src-container">
<pre class="src src-haskell"><span class="org-function-name">prop_optimality</span> (<span class="org-type">Positive</span> n) 
    <span class="org-variable-name">=</span> forAll (choose (1,n)) <span class="org-variable-name">$</span> <span class="org-variable-name">\</span>x <span class="org-variable-name">-&gt;</span>
        evalState (guessingGame x (bound n) ai) (1,n)
  <span class="org-keyword">where</span> bound n <span class="org-variable-name">=</span> ceiling (logBase 2 (fromIntegral n)) <span class="org-variable-name">+</span> 1
</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org18cd3c2" class="outline-2">
<h2 id="org18cd3c2"><span class="section-number-2">2</span> Submission instructions</h2>
<div class="outline-text-2" id="text-2">
<p>
You can submit your exercise by typing:
</p>
<div class="org-src-container">
<pre class="src src-sh">$ give cs3141 Ex05 Ex05.hs
</pre>
</div>
<p>
on a CSE terminal, or by using the <code>give</code> web interface. Your file <i>must</i> be named <code>Ex05.hs</code> (case-sensitive!). 
A dry-run test will partially autotest your solution at submission time. To get full marks, you will need to perform further testing yourself.
</p>
</div>
</div>
</div>
<div id="postamble" class="status">
<p class='date'> 2019-08-07 Wed 18:15 </p><small><a type='application/rss+xml' href='https://www.cse.unsw.edu.au/~cs3141/19t2/index.xml'>Announcements RSS</a></small>
</div>
</body>
</html>
